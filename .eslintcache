[{"/Users/tj3407/Desktop/Apps/react-paint/src/reportWebVitals.js":"1","/Users/tj3407/Desktop/Apps/react-paint/src/App.js":"2","/Users/tj3407/Desktop/Apps/react-paint/src/components/Paint/Paint.js":"3","/Users/tj3407/Desktop/Apps/react-paint/src/index.js":"4","/Users/tj3407/Desktop/Apps/react-paint/src/components/ColorPicker/ColorPicker.js":"5","/Users/tj3407/Desktop/Apps/react-paint/src/components/LineWeightPicker/LineWeightPicker.js":"6"},{"size":362,"mtime":1610163676570,"results":"7","hashOfConfig":"8"},{"size":5375,"mtime":1610339785337,"results":"9","hashOfConfig":"8"},{"size":2377,"mtime":1610313100652,"results":"10","hashOfConfig":"8"},{"size":449,"mtime":1610333368609,"results":"11","hashOfConfig":"8"},{"size":920,"mtime":1610322341345,"results":"12","hashOfConfig":"8"},{"size":1791,"mtime":1610339722184,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15wy1lq",{"filePath":"16","messages":"17","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/tj3407/Desktop/Apps/react-paint/src/reportWebVitals.js",[],"/Users/tj3407/Desktop/Apps/react-paint/src/App.js",["27","28","29","30","31"],"/Users/tj3407/Desktop/Apps/react-paint/src/components/Paint/Paint.js",["32","33"],"import React from \"react\";\n\nfunction useWindowSize() {\n  const [size, setSize] = React.useState([0, 0]);\n  React.useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerWidth, window.innerHeight]);\n    }\n    window.addEventListener(\"resize\", updateSize);\n    updateSize();\n    return () => window.removeEventListener(\"resize\", updateSize);\n  }, []);\n  return size;\n}\n\nfunction Paint(props) {\n  const [width, height] = useWindowSize();\n  const canvas = React.useRef();\n  const ctx = React.useRef();\n  const lastX = React.useRef(0);\n  const lastY = React.useRef(0);\n  let hue = 0,\n    isDrawing = false;\n\n  React.useEffect(() => {\n    draw();\n  }, []);\n\n  React.useEffect(() => {\n    canvas.current.className = \"\";\n    draw();\n  }, [width, height, props.toggleClear]);\n\n  React.useEffect(() => {\n    ctx.current.strokeStyle = props.color;\n  }, [props.color]);\n\n  React.useEffect(() => {\n    if (props.lineWidth > 0) {\n      canvas.current.classList.add(\"pencil\");\n      ctx.current.lineWidth = props.lineWidth;\n    }\n  }, [props.lineWidth]);\n\n  const draw = () => {\n    canvas.current.width = width;\n    canvas.current.height = height;\n    ctx.current = canvas.current.getContext(\"2d\");\n    ctx.current.lineJoin = \"round\";\n    ctx.current.lineCap = \"round\";\n    ctx.current.lineWidth = 20;\n  };\n\n  const handleMouseDown = (e) => {\n    isDrawing = true;\n    lastX.current = e.nativeEvent.offsetX;\n    lastY.current = e.nativeEvent.offsetY;\n  };\n\n  const handleMouseMove = (e) => {\n    if (isDrawing) {\n      //   ctx.current.strokeStyle = `hsl(${hue}, 100%, 50%)`;\n      ctx.current.beginPath();\n      ctx.current.moveTo(lastX.current, lastY.current);\n      ctx.current.lineTo(e.nativeEvent.offsetX, e.nativeEvent.offsetY);\n      ctx.current.stroke();\n      [lastX.current, lastY.current] = [\n        e.nativeEvent.offsetX,\n        e.nativeEvent.offsetY,\n      ];\n\n      hue++;\n      if (hue >= 360) {\n        hue = 0;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <canvas\n        ref={canvas}\n        id=\"paint\"\n        onMouseDown={handleMouseDown}\n        onTouchStart={handleMouseDown}\n        onMouseUp={() => (isDrawing = false)}\n        onTouchEnd={() => (isDrawing = false)}\n        onMouseOut={() => (isDrawing = false)}\n        onMouseMove={handleMouseMove}\n        onTouchMove={handleMouseMove}\n      />\n    </div>\n  );\n}\n\nexport default Paint;\n","/Users/tj3407/Desktop/Apps/react-paint/src/index.js",[],"/Users/tj3407/Desktop/Apps/react-paint/src/components/ColorPicker/ColorPicker.js",["34"],"/Users/tj3407/Desktop/Apps/react-paint/src/components/LineWeightPicker/LineWeightPicker.js",["35"],{"ruleId":"36","severity":1,"message":"37","line":19,"column":3,"nodeType":"38","messageId":"39","endLine":19,"endColumn":9},{"ruleId":"36","severity":1,"message":"40","line":20,"column":3,"nodeType":"38","messageId":"39","endLine":20,"endColumn":12},{"ruleId":"36","severity":1,"message":"41","line":21,"column":3,"nodeType":"38","messageId":"39","endLine":21,"endColumn":13},{"ruleId":"36","severity":1,"message":"42","line":22,"column":3,"nodeType":"38","messageId":"39","endLine":22,"endColumn":13},{"ruleId":"36","severity":1,"message":"43","line":57,"column":9,"nodeType":"38","messageId":"39","endLine":57,"endColumn":20},{"ruleId":"44","severity":1,"message":"45","line":27,"column":6,"nodeType":"46","endLine":27,"endColumn":8,"suggestions":"47"},{"ruleId":"44","severity":1,"message":"45","line":32,"column":6,"nodeType":"46","endLine":32,"endColumn":40,"suggestions":"48"},{"ruleId":"44","severity":1,"message":"49","line":14,"column":24,"nodeType":"50","endLine":14,"endColumn":41},{"ruleId":"44","severity":1,"message":"49","line":21,"column":29,"nodeType":"50","endLine":21,"endColumn":46},"no-unused-vars","'orange' is defined but never used.","Identifier","unusedVar","'lightBlue' is defined but never used.","'deepPurple' is defined but never used.","'deepOrange' is defined but never used.","'themeConfig' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'draw'. Either include it or remove the dependency array.","ArrayExpression",["51"],["52"],"React Hook useCallback received a function whose dependencies are unknown. Pass an inline function instead.","MemberExpression",{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},"Update the dependencies array to be: [draw]",{"range":"57","text":"58"},"Update the dependencies array to be: [width, height, props.toggleClear, draw]",{"range":"59","text":"60"},[669,671],"[draw]",[753,787],"[width, height, props.toggleClear, draw]"]